#!/bin/bash

#TODO REPLACE EVAL

#make sure os is comptatible
function check_os() {
	if [[ "$OSTYPE" == "cygwin" ]] || [[ "$OSTYPE" == "msys" ]] ||[[ "$OSTYPE" == "win32" ]] || [[ "$OSTYPE" == "freebsd"* ]]; then
		echo "teapot doesn't support $OSTYPE. If you're on BSD, you can try your luck."
		read -t 5
		ctrl_c
	fi
}

#sets PLAYMUSICWITH and PLAYERNAME
function check_requirements() {
	if [[ "$OSTYPE" == "darwin"* ]]; then
		if pkg_installed "afplay" && pkg_installed "afinfo"; then
			:
		else
			echo "Uh oh, you don't have afplay and afinfo installed. Go get 'em, tiger!"
			read -t 5
			ctrl_c
		fi

	elif [[ "$OSTYPE" == "linux-gnu" ]]; then
		local ffmpeg_installed=$(which ffmpeg 2> /dev/null)

		if [ -n "$ffmpeg_installed" ]; then
			echo "Uh oh, you don't have ffmpeg installed. Go get 'em, tiger!"
			read -t 5
			ctrl_c
		fi
	fi

	local other_teapot_installed=$(which teapot 2> /dev/null)
	if [ -n "$other_teapot_installed" ]; then
		echo "| You already have a program named teapot installed."
		echo "| We'll name this one 'teapot2', then."
		PLAYERNAME="teapot2"
	else
		PLAYERNAME="teapot"
	fi

	local bc_installed=$(which bc 2> /dev/null)
	local awk_installed=$(which awk 2> /dev/null)
	if [ -z "$bc_installed" ]; then
		if [ -z "$awk_installed" ]; then
			echo "| You have neither bc nor awk installed. Go install one!"
			read -t 5
			ctrl_c
		else
			replace_bc_with_awk
		fi
	fi
}

function ctrl_c() {
	print_bottom_border
	tput sgr0
	clear
	exit 1
}

#set blue theme
function make_colorful() {
	tput setab 4
	tput setaf 7
	tput bold
}

function print_top_border
{
	local cols=$(tput cols)
	local rows=$(tput lines)

	#print $cols - 2 number of = signs and 2 other symbols
	printf "Γ"
	local start=3
	local end=$cols
	for ((i=$start; i<=$end; i++)); do printf "="; done
	printf "ꓶ"
}

function print_bottom_border
{
	local cols=$(tput cols)
	local rows=$(tput lines)

	#print $cols - 2 number of = signs and 2 other symbols
	printf "L"
	local start=3
	local end=$cols
	for ((i=$start; i<=$end; i++)); do printf "="; done
	printf "⅃"
}

#replace ~/Downloads with user specified (in teapot script)
function replace_default_directory() {
	local default="~/Downloads"
	local new="$MUSIC_DIR" #user types in the path

	#bsd and macos need the extra "" argument passed to -i to overwrite file
	if [[ "$OSTYPE" == "darwin"* ]]; then
		local file="teapot"
		#replace ~/Downloads with new default globally in the teapot file
		sed -i "" 's',"$default","$new",'g' "$file"

	#linux doesn't use the ""
	elif [[ "$OSTYPE" == "linux-gnu" ]]; then
		local file="teapot4linux"
		#replace ~/Downloads with new default globally in the teapot file
		sed -i 's',"$default","$new",'g' "$file"
	fi
}

#use awk function instead of bc
function replace_bc_with_awk() {
	local original='INT_DURATION=$(float_to_int "$FLOAT_DURATION")'
	local new='INT_DURATION=$(float_to_int2 "$FLOAT_DURATION")'

	if [[ "$OSTYPE" == "darwin"* ]]; then
		local file="teapot"
		sed -i "" 's',"$original","$new",'g' "$file"

	elif [[ "$OSTYPE" == "linux-gnu" ]]; then
		local file="teapot4linux"
		sed -i 's',"$original","$new",'g' "$file"

	fi
}

function replace_mpg123_with_ffplay() {
	local original='mpg123 -q --no-gapless -D 0.5 --no-seekbuffer "$MUSIC_DIR"/"${MUSIC_LIST[$SONG_INDEX]}" &'
	local new='ffplay -nodisp "$MUSIC_DIR"/"${MUSIC_LIST[$SONG_INDEX]}" &> /dev/null'

	local original2="killall mpg123 &> /dev/null"
	local new2="killall ffplay &> /dev/null"

	if [[ "$OSTYPE" == "darwin"* ]]; then
		local file="teapot"
		sed -i "" 's',"$original","$new",'g' "$file"
		sed -i "" 's',"$original2","$new2",'g' "$file"

	elif [[ "$OSTYPE" == "linux-gnu" ]]; then
		local file="teapot4linux"
		sed -i 's',"$original","$new",'g' "$file"
		sed -i 's',"$original2","$new2",'g' "$file"

	fi
}

function pkg_installed() {
	man "$1" &> /dev/null
	local status=$? #if the man page exists status will be 0, else 1
	return $status
}

function validate_directory() {
	eval cd "$1" #TODO REPLACE EVAL
	local status=$?
	echo "$status"
}

make_colorful #blue "theme"
clear #makes entire screen blue
trap ctrl_c INT
print_top_border
#gets path to directory that current script is in
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

echo "| Welcome!"

#make sure operating system is compatible
check_os
#make sure required softwares are installed
check_requirements

echo "|"
echo "| * In which directory do you store all of your music files?"

read -r -p "| * Enter path: " MUSIC_DIR
status=$(validate_directory "$MUSIC_DIR")
while [ $status -eq 1 ]; do
	read -r -p "| Invalid. Enter path: " MUSIC_DIR
	status=$(validate_directory "$MUSIC_DIR")
done

#changes teapot file
replace_default_directory

echo "| Okay -- by default, teapot will play songs from $MUSIC_DIR"
echo "|"

#check OS, remove uneeded teapot, make executable
#playername is teapot or teapot2, depending on if another teapot is installed
if [[ "$OSTYPE" == "linux-gnu" ]]; then
	cd "$DIR" || exit
	rm teapot
	echo "| Since you're on Linux, we'll brew you the penguin tea."
	mv teapot4linux "$PLAYERNAME"
	chmod +x "$PLAYERNAME"

elif [[ "$OSTYPE" == "darwin"* ]]; then
	cd "$DIR" || exit
	rm teapot4linux
	echo "| Since you're on MacOS, we'll brew you the apple tea."
	mv teapot "$PLAYERNAME"
	chmod +x "$PLAYERNAME"

fi

echo 
echo "| Now, we'll move $PLAYERNAME into a folder in your PATH"
echo "|"
echo "| * In which directory do you store your shell scripts?"
echo "|      If in doubt, execute 'echo \$PATH' and pick one of the directories"
echo "|      Or do your googles."
echo "|"
echo "| * Note: enter 'manual' if you'd like to move the script by hand."

read -r -p "| * Enter path: " path
#not by hand, move the file into requested directory
if [ "$path" != "manual" ]; then
	status=$(validate_directory "$path")
	while [ $status -eq 1 ]; do
		read -r -p "| Invalid. Enter path: " path
		status=$(validate_directory "$path")
	done

	#expand ~ into $HOME so it would work
	path="${path/#\~/$HOME}"
	#move the script into folder with other executables
	mv $PLAYERNAME "$path"
else
	#since we're deleting this whole folder, move the script out so the user can manually relocate it later
	parent_dir="$(dirname "$DIR")"
	echo "| Understood! The executable will be in $parent_dir"
fi

echo "|"
cd "$DIR" || exit


echo "| Caution, all the files in $DIR are about to be deleted"
echo "| If you're not in the teapot downloaded directory, hit CTRL C"
read -r -p "| * continue?"


if [ "$path" = "manual" ]; then
	mv "$DIR"/"$PLAYERNAME" /tmp && rm -rf "$DIR" && mv /tmp/"$PLAYERNAME" "$parent_dir"
else
	rm -rf "$DIR"
fi

echo "| ... and, you're done! Simply type $PLAYERNAME and enjoy your music."

print_bottom_border

tput sgr0